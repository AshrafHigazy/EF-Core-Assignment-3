// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Database_First.Models;

public partial class ITIContext : DbContext
{
    public ITIContext()
    {
    }

    public ITIContext(DbContextOptions<ITIContext> options)
        : base(options)
    {
    }

    public virtual DbSet<CorseAndInstractor> CorseAndInstractors { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseInst> CourseInsts { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<StudCourse> StudCourses { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=higzo;Initial Catalog=ITI;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CorseAndInstractor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("CorseAndInstractors");

            entity.Property(e => e.CourseName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.InstructorName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasIndex(e => e.TopicId, "IX_Courses_TopicId");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Duration).HasDefaultValue(30);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValue("Untitled Course");

            entity.HasOne(d => d.Topic).WithMany(p => p.Courses)
                .HasForeignKey(d => d.TopicId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<CourseInst>(entity =>
        {
            entity.HasKey(e => new { e.InsId, e.CourseId });

            entity.ToTable("Course_Inst");

            entity.HasIndex(e => e.CourseId, "IX_Course_Inst_Course_ID");

            entity.Property(e => e.InsId).HasColumnName("ins_ID");
            entity.Property(e => e.CourseId).HasColumnName("Course_ID");
            entity.Property(e => e.Evaluate).IsRequired();

            entity.HasOne(d => d.Course).WithMany(p => p.CourseInsts).HasForeignKey(d => d.CourseId);

            entity.HasOne(d => d.Ins).WithMany(p => p.CourseInsts).HasForeignKey(d => d.InsId);
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.ToTable("Department");

            entity.HasIndex(e => e.InsId, "IX_Department_Ins_ID").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.InsId).HasColumnName("Ins_ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Ins).WithOne(p => p.Department)
                .HasForeignKey<Department>(d => d.InsId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.ToTable("Instructor");

            entity.HasIndex(e => e.DeptId, "IX_Instructor_Dept_ID");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Bouns).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DeptId).HasColumnName("Dept_ID");
            entity.Property(e => e.HourRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Salary).HasColumnType("money");

            entity.HasOne(d => d.Dept).WithMany(p => p.Instructors)
                .HasForeignKey(d => d.DeptId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<StudCourse>(entity =>
        {
            entity.HasKey(e => new { e.StudId, e.CourseId });

            entity.ToTable("Stud_Course");

            entity.HasIndex(e => e.CourseId, "IX_Stud_Course_Course_ID");

            entity.Property(e => e.StudId).HasColumnName("stud_ID");
            entity.Property(e => e.CourseId).HasColumnName("Course_ID");

            entity.HasOne(d => d.Course).WithMany(p => p.StudCourses).HasForeignKey(d => d.CourseId);

            entity.HasOne(d => d.Stud).WithMany(p => p.StudCourses).HasForeignKey(d => d.StudId);
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasIndex(e => e.DepId, "IX_Students_Dep_Id");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Address).IsRequired();
            entity.Property(e => e.DepId).HasColumnName("Dep_Id");
            entity.Property(e => e.Fname)
                .IsRequired()
                .HasColumnName("FName");
            entity.Property(e => e.Lname)
                .IsRequired()
                .HasColumnName("LName");

            entity.HasOne(d => d.Dep).WithMany(p => p.Students).HasForeignKey(d => d.DepId);
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name).IsRequired();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}